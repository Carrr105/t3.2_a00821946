
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSEBRACE CLOSEPARENTHESES CTEF CTEI CTESTRING DIFFERENT DIVIDE DOT ELSE EQUALS FLOAT GREATER ID IF INT LESS MINUS MULTIPLY OPENBRACE OPENPARENTHESES PLUS PRINT PROGRAM SEMICOLON TWODOTS VAR\n    programa : PROGRAM ID SEMICOLON vars bloque\n            | PROGRAM ID SEMICOLON vars\n            | PROGRAM ID SEMICOLON bloque\n            | PROGRAM ID SEMICOLON\n    \n    vars : VAR varsP\n    \n    varsP : ID TWODOTS tipo SEMICOLON\n        | ID TWODOTS tipo SEMICOLON varsP\n        | ID DOT varsP\n    \n    tipo : INT\n         | FLOAT\n    \n    bloque : OPENBRACE bloqueP CLOSEBRACE\n    \n    bloqueP : estatuto\n            | estatuto bloqueP\n            | empty\n    \n    estatuto : asignacion\n            | condicion\n            | escritura\n    \n    asignacion : ID EQUALS expresion SEMICOLON\n    \n    expresion : exp expresionP\n    \n    expresionP : GREATER exp\n            | LESS exp\n            | DIFFERENT exp\n            | empty\n    \n    escritura : PRINT OPENPARENTHESES escrituraP CLOSEPARENTHESES SEMICOLON\n    \n    escrituraP : expresion\n            | expresion DOT escrituraP\n            | CTESTRING\n            | CTESTRING DOT\n    \n    condicion : condicionP bloque SEMICOLON\n            | condicionP bloque ELSE bloque SEMICOLON\n    \n    condicionP : IF OPENPARENTHESES expresion CLOSEPARENTHESES\n    \n    exp : termino expP\n    \n    expP : PLUS exp\n         | MINUS exp\n         | empty\n    \n    termino : factor terminoP\n    \n    terminoP : MULTIPLY terminoP\n            | DIVIDE terminoP\n            | empty\n    \n    factor : OPENPARENTHESES expresion CLOSEPARENTHESES\n            | factorP\n    \n    factorP : PLUS varcte\n            | MINUS varcte\n            | varcte\n    \n    varcte : ID\n            | CTEI\n            | CTEF\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,9,10,24,33,52,75,],[0,-4,-2,-3,-1,-5,-11,-8,-6,-7,]),'ID':([2,7,8,13,15,16,17,23,26,28,29,39,41,43,46,52,53,55,56,57,60,61,72,84,85,],[3,11,18,18,-15,-16,-17,11,34,34,34,34,34,34,-29,11,-18,34,34,34,34,34,34,-30,-24,]),'SEMICOLON':([3,24,27,30,31,32,34,35,36,37,38,40,42,44,45,54,58,59,62,63,64,65,66,68,69,70,71,76,77,78,79,80,81,82,83,],[4,-11,46,52,-9,-10,-45,53,-48,-48,-48,-41,-44,-46,-47,-19,-23,-32,-35,-36,-48,-48,-39,-42,-43,84,85,-20,-21,-22,-33,-34,-37,-38,-40,]),'VAR':([4,],[7,]),'OPENBRACE':([4,5,10,19,33,47,52,74,75,],[8,8,-5,8,-8,8,-6,-31,-7,]),'CLOSEBRACE':([8,12,13,14,15,16,17,25,46,53,84,85,],[-48,24,-12,-14,-15,-16,-17,-13,-29,-18,-30,-24,]),'PRINT':([8,13,15,16,17,46,53,84,85,],[20,20,-15,-16,-17,-29,-18,-30,-24,]),'IF':([8,13,15,16,17,46,53,84,85,],[21,21,-15,-16,-17,-29,-18,-30,-24,]),'TWODOTS':([11,],[22,]),'DOT':([11,34,36,37,38,40,42,44,45,49,50,54,58,59,62,63,64,65,66,68,69,76,77,78,79,80,81,82,83,],[23,-45,-48,-48,-48,-41,-44,-46,-47,72,73,-19,-23,-32,-35,-36,-48,-48,-39,-42,-43,-20,-21,-22,-33,-34,-37,-38,-40,]),'EQUALS':([18,],[26,]),'OPENPARENTHESES':([20,21,26,28,29,39,55,56,57,60,61,72,],[28,29,39,39,39,39,39,39,39,39,39,39,]),'INT':([22,],[31,]),'FLOAT':([22,],[32,]),'ELSE':([24,27,],[-11,47,]),'PLUS':([26,28,29,34,37,38,39,40,42,44,45,55,56,57,60,61,63,64,65,66,68,69,72,81,82,83,],[41,41,41,-45,60,-48,41,-41,-44,-46,-47,41,41,41,41,41,-36,-48,-48,-39,-42,-43,41,-37,-38,-40,]),'MINUS':([26,28,29,34,37,38,39,40,42,44,45,55,56,57,60,61,63,64,65,66,68,69,72,81,82,83,],[43,43,43,-45,61,-48,43,-41,-44,-46,-47,43,43,43,43,43,-36,-48,-48,-39,-42,-43,43,-37,-38,-40,]),'CTEI':([26,28,29,39,41,43,55,56,57,60,61,72,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'CTEF':([26,28,29,39,41,43,55,56,57,60,61,72,],[45,45,45,45,45,45,45,45,45,45,45,45,]),'CTESTRING':([28,72,],[50,50,]),'MULTIPLY':([34,38,40,42,44,45,64,65,68,69,83,],[-45,64,-41,-44,-46,-47,64,64,-42,-43,-40,]),'DIVIDE':([34,38,40,42,44,45,64,65,68,69,83,],[-45,65,-41,-44,-46,-47,65,65,-42,-43,-40,]),'GREATER':([34,36,37,38,40,42,44,45,59,62,63,64,65,66,68,69,79,80,81,82,83,],[-45,55,-48,-48,-41,-44,-46,-47,-32,-35,-36,-48,-48,-39,-42,-43,-33,-34,-37,-38,-40,]),'LESS':([34,36,37,38,40,42,44,45,59,62,63,64,65,66,68,69,79,80,81,82,83,],[-45,56,-48,-48,-41,-44,-46,-47,-32,-35,-36,-48,-48,-39,-42,-43,-33,-34,-37,-38,-40,]),'DIFFERENT':([34,36,37,38,40,42,44,45,59,62,63,64,65,66,68,69,79,80,81,82,83,],[-45,57,-48,-48,-41,-44,-46,-47,-32,-35,-36,-48,-48,-39,-42,-43,-33,-34,-37,-38,-40,]),'CLOSEPARENTHESES':([34,36,37,38,40,42,44,45,48,49,50,51,54,58,59,62,63,64,65,66,67,68,69,73,76,77,78,79,80,81,82,83,86,],[-45,-48,-48,-48,-41,-44,-46,-47,71,-25,-27,74,-19,-23,-32,-35,-36,-48,-48,-39,83,-42,-43,-28,-20,-21,-22,-33,-34,-37,-38,-40,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,],[5,]),'bloque':([4,5,19,47,],[6,9,27,70,]),'varsP':([7,23,52,],[10,33,75,]),'bloqueP':([8,13,],[12,25,]),'estatuto':([8,13,],[13,13,]),'empty':([8,13,36,37,38,64,65,],[14,14,58,62,66,66,66,]),'asignacion':([8,13,],[15,15,]),'condicion':([8,13,],[16,16,]),'escritura':([8,13,],[17,17,]),'condicionP':([8,13,],[19,19,]),'tipo':([22,],[30,]),'expresion':([26,28,29,39,72,],[35,49,51,67,49,]),'exp':([26,28,29,39,55,56,57,60,61,72,],[36,36,36,36,76,77,78,79,80,36,]),'termino':([26,28,29,39,55,56,57,60,61,72,],[37,37,37,37,37,37,37,37,37,37,]),'factor':([26,28,29,39,55,56,57,60,61,72,],[38,38,38,38,38,38,38,38,38,38,]),'factorP':([26,28,29,39,55,56,57,60,61,72,],[40,40,40,40,40,40,40,40,40,40,]),'varcte':([26,28,29,39,41,43,55,56,57,60,61,72,],[42,42,42,42,68,69,42,42,42,42,42,42,]),'escrituraP':([28,72,],[48,86,]),'expresionP':([36,],[54,]),'expP':([37,],[59,]),'terminoP':([38,64,65,],[63,81,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON vars bloque','programa',5,'p_programa','lexyacc.py',76),
  ('programa -> PROGRAM ID SEMICOLON vars','programa',4,'p_programa','lexyacc.py',77),
  ('programa -> PROGRAM ID SEMICOLON bloque','programa',4,'p_programa','lexyacc.py',78),
  ('programa -> PROGRAM ID SEMICOLON','programa',3,'p_programa','lexyacc.py',79),
  ('vars -> VAR varsP','vars',2,'p_vars','lexyacc.py',85),
  ('varsP -> ID TWODOTS tipo SEMICOLON','varsP',4,'p_varsP','lexyacc.py',90),
  ('varsP -> ID TWODOTS tipo SEMICOLON varsP','varsP',5,'p_varsP','lexyacc.py',91),
  ('varsP -> ID DOT varsP','varsP',3,'p_varsP','lexyacc.py',92),
  ('tipo -> INT','tipo',1,'p_tipo','lexyacc.py',97),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lexyacc.py',98),
  ('bloque -> OPENBRACE bloqueP CLOSEBRACE','bloque',3,'p_bloque','lexyacc.py',104),
  ('bloqueP -> estatuto','bloqueP',1,'p_bloqueP','lexyacc.py',109),
  ('bloqueP -> estatuto bloqueP','bloqueP',2,'p_bloqueP','lexyacc.py',110),
  ('bloqueP -> empty','bloqueP',1,'p_bloqueP','lexyacc.py',111),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','lexyacc.py',116),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexyacc.py',117),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','lexyacc.py',118),
  ('asignacion -> ID EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','lexyacc.py',123),
  ('expresion -> exp expresionP','expresion',2,'p_expresion','lexyacc.py',128),
  ('expresionP -> GREATER exp','expresionP',2,'p_expresionP','lexyacc.py',133),
  ('expresionP -> LESS exp','expresionP',2,'p_expresionP','lexyacc.py',134),
  ('expresionP -> DIFFERENT exp','expresionP',2,'p_expresionP','lexyacc.py',135),
  ('expresionP -> empty','expresionP',1,'p_expresionP','lexyacc.py',136),
  ('escritura -> PRINT OPENPARENTHESES escrituraP CLOSEPARENTHESES SEMICOLON','escritura',5,'p_escritura','lexyacc.py',141),
  ('escrituraP -> expresion','escrituraP',1,'p_escrituraP','lexyacc.py',146),
  ('escrituraP -> expresion DOT escrituraP','escrituraP',3,'p_escrituraP','lexyacc.py',147),
  ('escrituraP -> CTESTRING','escrituraP',1,'p_escrituraP','lexyacc.py',148),
  ('escrituraP -> CTESTRING DOT','escrituraP',2,'p_escrituraP','lexyacc.py',149),
  ('condicion -> condicionP bloque SEMICOLON','condicion',3,'p_condicion','lexyacc.py',154),
  ('condicion -> condicionP bloque ELSE bloque SEMICOLON','condicion',5,'p_condicion','lexyacc.py',155),
  ('condicionP -> IF OPENPARENTHESES expresion CLOSEPARENTHESES','condicionP',4,'p_condicionP','lexyacc.py',160),
  ('exp -> termino expP','exp',2,'p_exp','lexyacc.py',165),
  ('expP -> PLUS exp','expP',2,'p_expP','lexyacc.py',170),
  ('expP -> MINUS exp','expP',2,'p_expP','lexyacc.py',171),
  ('expP -> empty','expP',1,'p_expP','lexyacc.py',172),
  ('termino -> factor terminoP','termino',2,'p_termino','lexyacc.py',177),
  ('terminoP -> MULTIPLY terminoP','terminoP',2,'p_terminoP','lexyacc.py',182),
  ('terminoP -> DIVIDE terminoP','terminoP',2,'p_terminoP','lexyacc.py',183),
  ('terminoP -> empty','terminoP',1,'p_terminoP','lexyacc.py',184),
  ('factor -> OPENPARENTHESES expresion CLOSEPARENTHESES','factor',3,'p_factor','lexyacc.py',189),
  ('factor -> factorP','factor',1,'p_factor','lexyacc.py',190),
  ('factorP -> PLUS varcte','factorP',2,'p_factorP','lexyacc.py',195),
  ('factorP -> MINUS varcte','factorP',2,'p_factorP','lexyacc.py',196),
  ('factorP -> varcte','factorP',1,'p_factorP','lexyacc.py',197),
  ('varcte -> ID','varcte',1,'p_varcte','lexyacc.py',202),
  ('varcte -> CTEI','varcte',1,'p_varcte','lexyacc.py',203),
  ('varcte -> CTEF','varcte',1,'p_varcte','lexyacc.py',204),
  ('empty -> <empty>','empty',0,'p_empty','lexyacc.py',209),
]
